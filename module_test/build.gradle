import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.library'
}

apply from: 'maven_push.gradle'

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    publishNonDefault true
    // 渠道配置
    productFlavors {
        phone {
            dimension "default"
        }

        pad {
            dimension "default"
        }
    }

    // 取出当前选择的渠道名
    def currentFlavor = getCurrentFlavor()
    println("===>>> currentFlavor: ${currentFlavor}")
    currentFlavor = currentFlavor.toLowerCase()
    def isPad = currentFlavor.contains("pad")
    def isDebug = currentFlavor.contains("debug")
    def publishFlavor = "${ isPad ? 'pad' : 'phone'}${ isDebug ? 'Debug' : 'Release'}"
    println("===>>> publishFlavor: ${publishFlavor}")
    // 取要指定默认发布要使用的 configuration
    defaultPublishConfig publishFlavor

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']
        }

        phone {
            java.srcDirs = ['src/main_phone/java']
            res.srcDirs = ['src/main_phone/res']
        }

        pad {
            java.srcDirs = ['src/main_pad/java']
            res.srcDirs = ['src/main_pad/res']
        }
    }
}

// 取出当前选择的渠道名
def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String taskName = gradle.getStartParameter().getTaskNames().toString()
    Pattern pattern
    if (taskName.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)((Release|Debug)*)")
    } else {
        pattern = Pattern.compile("generate(\\w+)((Release|Debug)*)")
    }
    Matcher matcher = pattern.matcher(taskName)
    if (matcher.find()) {
        return matcher.group(1)
    }
    return ""
}

dependencies {
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    implementation 'androidx.appcompat:appcompat:1.0.0'
}